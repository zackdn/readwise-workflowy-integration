var booksRoot = WF.currentItem()
var booksList = booksRoot.getChildren()

bookListUpdated = booksRoot.getNote()
bookListUpdated = bookListUpdated.split("Updated: ")[1]
if(bookListUpdated!= null){
    bookListUpdated = new Date(bookListUpdated)
    bookListUpdated = bookListUpdated.toISOString()
} else {
    bookListUpdated = new Date("1980-01-01")
    bookListUpdated = bookListUpdated.toISOString()}

console.log(bookListUpdated)

var bookArray = []

booksList.forEach(function(book){
    bookID = book.data.note.split("Book ID: ")[1]
    bookUpdated = book.data.note.split("Updated: ")[1]
    bookUpdated = bookUpdated.split(" | ")[0]

    arr = {
        wfID:   book.data.id, 
        wfName: book.data.name, 
        wfNote: book.data.note,
        bookID: bookID,
        bookUpdated: bookUpdated
    }
    bookArray.push(arr)
});

console.log(bookArray)

var book_request = new XMLHttpRequest()
book_request.open('GET', `https://readwise.io/api/v2/books/?num_highlights__gt=0&updated__gt=${bookListUpdated}&page_size=19&page=1`, true)

book_request.setRequestHeader("Authorization", "Token XXX");
book_request.onload = function () {
    // Begin accessing JSON data here
    var data = JSON.parse(this.response)

    console.log(data.results)
    
    getBooks(1, bookListUpdated)

    var pageCount = Math.ceil(data.count/20)
    
    if (pageCount>1){
        var i
        for (i=2; i<=pageCount; i++){
            setTimeout(getBooks, 60000, i, bookListUpdated)
        }
    }
}
book_request.send()

function getBooks(pageNum, lastUpdated){
    // Create a request variable and assign a new XMLHttpRequest object to it.
    var book_request = new XMLHttpRequest()

    // Open a new connection, using the GET request on the URL endpoint
    book_request.open('GET', `https://readwise.io/api/v2/books/?num_highlights__gt=0&updated__gt=${lastUpdated}&page_size=20&page=${pageNum}`, true)
    book_request.setRequestHeader("Authorization", "Token XXX");
    book_request.onload = function () {
        // Begin accessing JSON data here
        var data = JSON.parse(this.response)

        data.results.forEach(function(result){
            existingBook = bookArray.findIndex(x => x.bookID == result.id)

            result.author = result.author.replaceAll(',', '#')
            result.author = result.author.replaceAll(' ', '_')
            result.author = result.author.replaceAll('.', '')
            result.author = result.author.replaceAll('#', ' #')
            result.updated = new Date(result.updated)

            if(existingBook != "-1"){ //This book exists already - just add the note as a child
                existingBook = bookArray.find(x => x.bookID == result.id).wfID
                //console.log("Old book: " + existingBook + "!")

                oldBook = WF.getItemById(existingBook)

                WF.setItemNote(oldBook,'#' + result.author + " | Notes: " + result.num_highlights + " | Updated: " + result.updated.toDateString() + " | Book ID: " + result.id)

                if (result.num_highlights > 0){
                    setTimeout(getHighlights, 1, result.id, oldBook, bookListUpdated)
                }
            }
            else {
                console.log("New book!")

                wfBook = WF.createItem(WF.currentItem(),0)

                var parent = wfBook.getParent()
                var timeElapsed = Date.now();
                var today = new Date(timeElapsed);

                WF.setItemNote(parent, "Updated: " + today.toString())

                if (result.source_url == null){
                    WF.setItemName(wfBook,result.title + ' #' + result.category)
                } else {
                    WF.setItemName(wfBook,'<a href="' + result.source_url + '">' + result.title + '</a> #' + result.category)
                }
                WF.setItemNote(wfBook,'#' + result.author + " | Notes: " + result.num_highlights + " | Updated: " + result.updated.toDateString() + " | Book ID: " + result.id)
                
                if (result.num_highlights > 0){
                    setTimeout(getHighlights, 1, result.id, wfBook, bookListUpdated)
                }
            }
        })
    }

    // Send request
    book_request.send()
}

function getHighlights(bookID, wfNode, lastUpdated){
    
    var highlightArray = []

    var highlightsList = wfNode.getChildren()

    highlightsList.forEach(function(highlight){
        highlightID = highlight.data.note.split("Note ID: ")[1]
        highlightUpdated = highlight.data.note.split("Added: ")[1]
        highlightUpdated = highlightUpdated.split(" | ")[0]

        arr = {
            wfID:               highlight.data.id, 
            wfName:             highlight.data.name, 
            wfNote:             highlight.data.note,
            highlightID:        highlightID,
            highlightUpdated:   highlightUpdated
        }
        highlightArray.push(arr)
    });

    //console.log(highlightArray)

    // Create a request variable and assign a new XMLHttpRequest object to it.
    var highlight_request = new XMLHttpRequest()

    // Open a new connection, using the GET request on the URL endpoint
    highlight_request.open('GET', `https://readwise.io/api/v2/highlights/?book_id=${bookID}&updated__gt=${lastUpdated}`, false)
    highlight_request.setRequestHeader("Authorization", "Token XXX");
    highlight_request.onload = function () {
        // Begin accessing JSON data here
        var data = JSON.parse(this.response)

        var highlights = []

        data.results.forEach(function(result){

            existingHighlight = highlightArray.findIndex(x => x.highlightID == result.id)

            result.updated = new Date(result.updated)

            if(existingHighlight != "-1"){ //This highlight exists already - just update the existing one
                existingHighlight = highlightArray.find(x => x.highlightID == result.id).wfID
                
                //console.log(existingHighlight)

                wfHighlight = WF.getItemById(existingHighlight)
                WF.setItemName(wfHighlight, result.text)
                WF.setItemNote(wfHighlight, "Added: " + result.updated.toDateString() + " | Note ID: " + result.id)
                highlights.push(wfHighlight)
            } else{
                wfHighlight = WF.createItem(WF.currentItem(),0)
                WF.setItemName(wfHighlight, result.text)
                WF.setItemNote(wfHighlight, "Added: " + result.updated.toDateString() + " | Note ID: " + result.id)
                highlights.push(wfHighlight)
            }
        });
        WF.moveItems(highlights, wfNode)
    }

    // Send request
    highlight_request.send()
}
